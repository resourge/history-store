const fs = require('fs');
const path = require('path');

// Define the path to the coverage-summary.json
const coverageSummaryFile = path.join(__dirname, 'coverage', 'coverage-final.json');

// Check if the file exists
if (!fs.existsSync(coverageSummaryFile)) {
  console.error(`Coverage summary file not found: ${coverageSummaryFile}`);
  process.exit(1);
}

// Load and parse coverage data
const coverageData = JSON.parse(fs.readFileSync(coverageSummaryFile, 'utf-8'));

// Helper to get the commit SHA
const getCommitSha = () => process.env.GITHUB_SHA || 'unknown commit';

// Function to generate coverage comment
function generateCoverageComment(coverageData) {
  let comment = '## Coverage Report\n\n';

  // Initialize coverage totals
  let statementsCovered = 0, statementsTotal = 0;
  let branchesCovered = 0, branchesTotal = 0;
  let functionsCovered = 0, functionsTotal = 0;

  // Iterate through each file's coverage
  for (const file in coverageData) {
    const { s = {}, b = {}, f = {} } = coverageData[file];
    const fileStatementsTotal = Object.keys(s).length;
    const fileStatementsCovered = Object.values(s).filter(v => v > 0).length;
    const fileBranchesTotal = Object.keys(b).length;
    const fileBranchesCovered = Object.values(b).flat().filter(v => v > 0).length;
    const fileFunctionsTotal = Object.keys(f).length;
    const fileFunctionsCovered = Object.values(f).filter(v => v > 0).length;

    // Update global totals
    statementsTotal += fileStatementsTotal;
    statementsCovered += fileStatementsCovered;
    branchesTotal += fileBranchesTotal;
    branchesCovered += fileBranchesCovered;
    functionsTotal += fileFunctionsTotal;
    functionsCovered += fileFunctionsCovered;
  }

  // Calculate percentage
  const percentage = (covered, total) => total > 0 ? ((covered / total) * 100).toFixed(2) : 'N/A';

  // Build the summary table
  comment += `| Category   | Percentage | Covered / Total |\n`;
  comment += `|------------|------------|-----------------|\n`;
  comment += `| Statements | ${percentage(statementsCovered, statementsTotal)}% | ${statementsCovered} / ${statementsTotal} |\n`;
  comment += `| Branches   | ${percentage(branchesCovered, branchesTotal)}% | ${branchesCovered} / ${branchesTotal} |\n`;
  comment += `| Functions  | ${percentage(functionsCovered, functionsTotal)}% | ${functionsCovered} / ${functionsTotal} |\n`;

  comment += `\n\n`; // Add failure message if applicable

  // Footer with commit SHA
  const commitSha = getCommitSha();
  comment += `<p align="right">Report generated by <a href="https://github.com/vitest-dev/vitest">ðŸ§ªVitest coverage report action</a> from commit ${commitSha}</p>\n`;

  return comment;
}

// Generate the comment and write to file
const comment = generateCoverageComment(coverageData);
fs.writeFileSync('coverage-comment.md', comment);
console.log('Coverage comment generated successfully.');
