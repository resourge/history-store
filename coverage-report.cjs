const fs = require('fs');
const path = require('path');

// Define the path to the coverage-summary.json
const coverageDir = path.join(__dirname, 'coverage');
const coverageSummaryFile = path.join(coverageDir, 'coverage-final.json');

// Check if the file exists
if (!fs.existsSync(coverageSummaryFile)) {
  console.error(`Coverage summary file not found: ${coverageSummaryFile}`);
  process.exit(1);
}

// Load and parse coverage data
const coverageData = JSON.parse(fs.readFileSync(coverageSummaryFile, 'utf-8'));

// Function to generate coverage comment
function generateCoverageComment(coverageData) {
  let comment = '## Coverage report\n\n';

  // Helper function to format paths for comments
  function formatPath(filePath) {
    return filePath.replace(/C:\\Personal\\history-store\\src\\/g, '').replace(/\\/g, '/');
  }

  // Initialize coverage details
  let statementsCovered = 0;
  let statementsTotal = 0;
  let branchesCovered = 0;
  let branchesTotal = 0;
  let functionsCovered = 0;
  let functionsTotal = 0;
  let linesCovered = 0;
  let linesTotal = 0;

  // Check each file in the coverage summary
  for (const filePath in coverageData) {
    const fileCoverage = coverageData[filePath];

    if (fileCoverage.all) {
      const statements = fileCoverage.s || {};
      const branches = fileCoverage.b || {};
      const functions = fileCoverage.f || {};
      const lines = fileCoverage.statementMap || {};

      // Update totals
      const totalStatements = Object.keys(statements).length;
      const coveredStatements = Object.values(statements).filter(v => v > 0).length;
      const totalBranches = Object.keys(branches).length;
      const coveredBranches = Object.values(branches).flat().filter(v => v > 0).length;
      const totalFunctions = Object.keys(functions).length;
      const coveredFunctions = Object.values(functions).filter(v => v > 0).length;
      const totalLines = Object.keys(lines).length;
      const coveredLines = Object.keys(lines).length; // Assuming all lines are covered if `all` is true

      statementsTotal += totalStatements;
      statementsCovered += coveredStatements;
      branchesTotal += totalBranches;
      branchesCovered += coveredBranches;
      functionsTotal += totalFunctions;
      functionsCovered += coveredFunctions;
      linesTotal += totalLines;
      linesCovered += coveredLines;
    }
  }

  // Calculate percentages
  const calcCoverage = (covered, total) => total > 0 ? ((covered / total) * 100).toFixed(2) : 0;
  const statementCoverage = calcCoverage(statementsCovered, statementsTotal);
  const branchCoverage = calcCoverage(branchesCovered, branchesTotal);
  const functionCoverage = calcCoverage(functionsCovered, functionsTotal);
  const lineCoverage = calcCoverage(linesCovered, linesTotal);

  // Build the report
  comment += `> [!CAUTION]\n> Test run failed\n\n`;
  comment += `| <div title="Status of coverage:&#10; 游릭 - ok&#10; 游리 - slightly more than threshold&#10; 游댮 - under the threshold">St.<sup>:grey_question:</sup></div> | Category | Percentage | Covered / Total |\n`;
  comment += `| :-: | :- | :- | :-: |\n`;
  comment += `| 游릭 | Statements | ${statementCoverage}% | ${statementsCovered}/${statementsTotal} |\n`;
  comment += `| 游릭 | Branches | ${branchCoverage}% | ${branchesCovered}/${branchesTotal} |\n`;
  comment += `| 游릭 | Functions | ${functionCoverage}% | ${functionsCovered}/${functionsTotal} |\n`;
  comment += `| 游릭 | Lines | ${lineCoverage}% | ${linesCovered}/${linesTotal} |\n\n`;

  // Placeholder for failed tests (if applicable)
  comment += `## Test suite run failed\n\n`;
  comment += `List of files failed...\n\n`;

  // Function to get the commit SHA from the environment variable
  function getCommitSha() {
    return process.env.GITHUB_SHA || 'unknown commit';
  }

  // Add footer with the report action link
  const commitSha = getCommitSha();
  const footer = `<p align="right">Report generated by <a href="https://github.com/vitest-dev/vitest">游빍Vitest coverage report action</a> from ${commitSha}</p>`;

  comment += footer;

  return comment;
}

// Generate comment and write to file
const comment = generateCoverageComment(coverageData);
fs.writeFileSync('coverage-comment.md', comment);

console.log('Coverage comment generated successfully.');
